//
//  File.swift
//  HALTeacher
//
//  Created by Toshiki Higaki on 2015/09/25.
//  Copyright (c) 2015年 sotuken. All rights reserved.
//

import Foundation
import UIKit

class ClickerTypeSelectViewController: UIViewController, TeacherMoodleAccessDelegate {
    //indicator宣言
    var indicator :UIActivityIndicatorView!
    
    //ダウンロード中のalertView
    var downloadingAlertView :UIAlertController!
    
    var teacherMoodleAccess: TeacherMoodleAccess!

    var clickerCount = 0
    
    var delegateCount = 0

    var typeBox :[String] = ["2", "3", "4", "5", "moodle"]
    var selectType = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()

        self.teacherMoodleAccess = TeacherMoodleAccess()
        self.teacherMoodleAccess.delegate = self

        // Do any additional setup after loading the view, typically from a nib.
 
    }
    
    override func viewWillAppear(animated: Bool) {
        ClickerInfo.clickerInfoInstance.setEmpty()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /**
    セグエ移動の値渡し
    */
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject!) {
        if (segue.identifier == "goClickerBarGraphViewControllerSegue") {
            let clickerBarGraphViewController : ClickerBarGraphViewController = segue.destinationViewController as!  ClickerBarGraphViewController
            clickerBarGraphViewController.questionType = selectType
        }
    }
    
    
    /**
    選択したtypeのクリッカーを始めるためのアラート
    */
    func createAlertView(title:String, message:String){
        //AlertController作成
        var moodleLoginAlertView = UIAlertController(title: title, message: message, preferredStyle: .Alert)
        //アクセスボタンを押した時
        var accessAction = UIAlertAction(title: "始める", style: UIAlertActionStyle.Default) {
            UIAlertAction in
            //アクセス成功した時
            // 学生にクリッカー開始を通知
            ClickerInfo.clickerInfoInstance.setEmpty()
            ClickerInfo.clickerInfoInstance.answerNumber = self.selectType.toInt()
            CoreCentralManager.coreCentralInstance.sendWritingRequest(CoreCentralManager.coreCentralInstance.clickerUUID, sendData: nil)
            
            self.performSegueWithIdentifier("goClickerBarGraphViewControllerSegue", sender: nil)
        }
        
        //キャンセルボタンを押した時
        var chancelAction = UIAlertAction(title: "キャンセル", style: UIAlertActionStyle.Default) {
            UIAlertAction in
        }
        // Add the actions
        moodleLoginAlertView.addAction(accessAction)
        moodleLoginAlertView.addAction(chancelAction)
        self.presentViewController(moodleLoginAlertView, animated: true, completion: nil)
    }
    

    /**
    ダウンロードしますか画面の作成
    */
    func showDownloadAlertView() {
        //indicatorの初期化
        indicator = UIActivityIndicatorView(activityIndicatorStyle: .Gray)
        
        var alertView = UIAlertController(title: "クリッカー情報のダウンロードを行います", message:"ダウンロードしますか？", preferredStyle: .Alert)
        
        var okAction = UIAlertAction(title: "ダウンロード", style: UIAlertActionStyle.Default) {
            UIAlertAction in
            
            // ログイン処理
            self.teacherMoodleAccess.moodleLogin(UserInfo.userInfoInstance.userID!, password: UserInfo.userInfoInstance.password!)
            
            //AlertController作成
            self.downloadingAlertView = UIAlertController(title: "ダウンロード中", message: "\n\n", preferredStyle: .Alert)
            //indicatorの位置決め
            self.indicator.center = CGPointMake(alertView.view.frame.size.width/2 ,self.downloadingAlertView.view.frame.size.height/10)
            
            //indicatorを回す
            self.indicator.startAnimating()
            
            //AlertControllerにindicatorを追加させる
            self.downloadingAlertView.view.addSubview(self.indicator)
            
            //Viewを見せる
            self.presentViewController(self.downloadingAlertView, animated: true, completion: nil)
        }
        
        var cancelAction = UIAlertAction(title: "キャンセル", style: UIAlertActionStyle.Default) {
            UIAlertAction in
        }
        
        // Add the actions
        alertView.addAction(okAction)
        alertView.addAction(cancelAction)
        
        // Present the controller
        self.presentViewController(alertView, animated: true, completion: nil)
    }
    
    
    /**
    失敗時のアラート
    */
    func failedAlert() {
        //AlertController作成
        var moodleAccessAlertView = UIAlertController(title: "ダウンロードに失敗しました。", message: "再度試してください。", preferredStyle: .Alert)
        
        //OKボタンを押した時
        var okAction = UIAlertAction(title: "OK", style: UIAlertActionStyle.Default) {
            UIAlertAction in
        }
        
        // Add the actions
        moodleAccessAlertView.addAction(okAction)
        
        //Viewを見せる
        self.presentViewController(moodleAccessAlertView, animated: true, completion: nil)
        
    }
    
    
    @IBAction func pushTwoSelect(sender: AnyObject) {
        selectType = typeBox[0]
        self.createAlertView("2択問題を選択しました",message: "始めますか？")
    }
    
    @IBAction func pushThreeSelect(sender: AnyObject) {
        selectType = typeBox[1]
        self.createAlertView("3択問題を選択しました",message: "始めますか？")
    }
    
    @IBAction func pushFourSelect(sender: AnyObject) {
        selectType = typeBox[2]
        self.createAlertView("4択問題を選択しました",message: "始めますか？")
    }
    
    @IBAction func pushFiveSelect(sender: AnyObject) {
        selectType = typeBox[3]
        self.createAlertView("5択問題を選択しました",message: "始めますか？")
    }
    
    @IBAction func pushMoodleQuestion(sender: AnyObject) {
        selectType = typeBox[4]
        self.showDownloadAlertView()
        
    }
    
    
    // ----Delegate宣言----
    
    
    /**
    ダウンロードを失敗した時のデリゲート
    */
    func downloadFailed() {
        self.downloadingAlertView.dismissViewControllerAnimated(true, completion: nil)
        self.failedAlert()
        
    }
    
    /**
    ログインした時の結果を返すデリゲート
    */
    func loginResult(result: Bool){
        let selectCource = MoodleInfo.moodleInfoInstance.selectCource
        if result {
            MoodleInfo.moodleInfoInstance.selectCource.clickerContentList = []
            for clickerContent in selectCource.clickerContentList {
                // Moodleからクリッカー情報を取得
                self.teacherMoodleAccess.getClickerDB(selectCource.courceNumber.toInt()!, url: clickerContent.clickerDBURL)
                self.clickerCount++
            }
        }
        else {
            self.downloadingAlertView.dismissViewControllerAnimated(true, completion: nil)
            self.failedAlert()
        }
    }
    
    /**
    クリッカー情報取得後
    */
    func getedClickerInfo() {
        self.delegateCount++
        if self.clickerCount == self.delegateCount {
            self.downloadingAlertView.dismissViewControllerAnimated(true, completion: nil)
            // ログアウト処理
            self.teacherMoodleAccess.logout()
            self.performSegueWithIdentifier("goSelectMoodleQuestionSegue", sender: nil)

        }
    }
    
}

